// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  tone          String        @default("casual")
  theme         String        @default("light")
  badges        Json          @default("[]")
  streak        Int           @default(0)
  lastActive    DateTime?
  messages      ChatMessage[]
  usage         UserUsage[]
  analytics     Analytics[]
  accounts      Account[]
  sessions      Session[]
  leaderboard   Leaderboard?

  @@index([lastActive])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    String
  sessionId String
  role      String
  content   String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId, timestamp])
}

model UserUsage {
  id         Int      @id @default(autoincrement())
  userId     String
  queryCount Int      @default(0)
  imageCount Int      @default(0)
  timestamp  DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model Analytics {
  id         Int      @id @default(autoincrement())
  userId     String
  sessionId  String
  queryCount Int
  duration   Int
  topic      String?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId, timestamp])
}

model Leaderboard {
  id         Int    @id @default(autoincrement())
  userId     String @unique
  queryCount Int
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([queryCount])
}
